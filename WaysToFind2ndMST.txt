According to the hint in Competitive Programming 3, this problem can be solved using techniques of Lowest Common Ancestor(LCA) or Disjoint Set Union(DSU). On this page: https://en.wikipedia.org/wiki/Robert_Tarjan, I found an algorithm to solve LCA using DSU so I guess the hints are mainly talk about LCA. It's just that LCA can be solved in various ways, including using DSU. Another way to solve LCA is to use sparse table.

Another method to solve the 2nd MST problem is described here: https://webdocs.cs.ualberta.ca/~xianchen/teaching/TutorialW0611.pdf . In fact, it was after reading this tutorial that I came up with the idea about how to use LCA to solve the 2nd MST problem. Let me first explain what the idea is in the tutorial from ualberta.

UAlberta method:
1. A MST is a tree, obviously. The 2nd MST has only one edge different from the best one. Thus, expressed in a formula, the solution is like: T' = T - w{u, v} + w{x, y}, where w{x, y} - w{u, v} is the minimum among all choices of u,v and x,y.

2. Before removing {u, v} from T, adding an edge {x, y} will form a loop in the original MST T. Thus, removing the edge having largest weight on this loop(excluding {x, y}) gives us the answer. To achieve our goal efficiently, we do a BFS traverse after getting the best MST T. This BFS stores the largest weight of an edge which consists of the path from u to v for all pair u, v. This step takes O(V * BFS on tree) = O(V * V) time.

3. Enumerate all edges not included in T, for each edge {x, y}, it forms a loop from x to y. Then we use the result we got from step 2 to find the edge with the largest weight on the loop from x to y, and replace it with the new edge {x, y}. After enumerate all possible {x, y}, we are done. This step takes O(E * query) = O(E * 1) = O(E) time.

This algorithm takes O(V * V) time and uses O(V * V) space.

LCA methods:
Refer to the answer by Gerald on this page http://stackoverflow.com/questions/22109647/faster-second-best-mst-algorithm . It has the same idea as the UAlberta method. But instead of computing every possible pair p, q in the best MST, it saves some computation by taking the idea of sparse table. It only computes the max edge on the path from u to its ancestor with a difference of 2^i in depth.
